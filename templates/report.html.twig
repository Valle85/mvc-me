{% extends "base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block main %}
    <h1>Redovisning</h1>

<section id="kmom01">
    <h2>kmom01</h2>
    <p>Jag har tidigare testat objektorienerad programmering främst i JavaScript och Python, men inte i PHP. 
    Jag har känner igen vissa strutkurer som klasser, objekt, arv, konstruktorn  men det är lite annorlunda än vad jag är van med. 
    Jag har fått en tydligare inblick i hur dessa används i PHP. 
    I tidigare kurser har jag testat en del PHP, så det är roligt att nu få bygga mer strukturerat med klasser och ramverk. 
    Det känns som att denna kurs är mera omfattande.</p>

    <p>PHPs modell för klasser och objekt fungerar på ett liknande sätt som i andra språk. 
    För att komma igång behöver man veta hur man skapar en klass med class, hur man gör ett objekt med new, och hur man skapar egenskaper och metoder i klassen. 
    Det är också bra att förstå vad public, private och protected betyder. 
    Man använder ofta en metod som heter __construct() för att köra kod direkt när objektet skapas. 
    Det är också viktigt att veta hur man organiserar sin kod i olika filer och mappar med hjälp av namespaces.</p>

    <p>När det gäller strukturen i me-sidan tycker jag att den var väl genomtänkt. 
    Symfony är ett stort ramverk, men det ger tydliga riktlinjer för hur man bör organisera controllers, templates och routes. 
    Att arbeta med Twig var smidigt, och det gjorde det lätt att separera logik och presentation. 
    Jag gillar att varje route har en egen metod i controllern och att man enkelt kan återanvända layout.
    Jag upplevde dock att det ibland var lite mycket att hålla reda på i början, men med lite övning blir det lättare snart.</p>

    <p>Artikeln PHP The Right Way var väldigt användbar och lättläst. 
    Jag tycker Composer är extra intressant eftersom det gör det enkelt att lägga till färdiga paket.
    Även avsnitten om kodstil, säkerhet och testning var intressanta.
    Jag vill gärna lära mig mer om testning, det verkar användbart för att hitta fel tidigt. 
    Kodstilen som föreslås gör koden tydligare och lättare att förstå.</p>

    <p>Min TIL för detta kmom är vad Symfony och hur det används.
    Jag hade förväntat mig att det skulle vara betydligt mer komplicerat att komma igång, men tack vare strukturen från övningen har det gått ganska smidigt. 
    Jag lärde mig också hur routing fungerar i Symfony och hur man bygger upp JSON API:er. 
    Jag tycker det bra att följa ramverkets struktur för att det ska gå snabbt och smidigt att skriva kod.</p>
</section>

<section id="kmom02">
    <h2>kmom02</h2>
    <p>Arv utökar basklassens beteende. Exempelvis ärver hund från djur. Subklassen ärver från basklassen och ska kunna ersätta basklassen.
    Komposition kan man säga att när en klass innehåller en annan klass, exempelvis har ett hus rum och rum kan inte finnas om huset brinner ned.
    Interface är kontrakt av klassstrukturen, som avtal som gäller metoder. Det används ofta när man vill säkerställa att vissa metoder finns men inte hur de är implementerade.
    Slutligen Trait är återanvändbar fristående koddel. Den används istället för multipelt arv eftersom PHP inte stödjer det direkt, och det är ett sätt att återanvända kod i olika klasser utan arv.</p>

    <p>För att lösa uppgiften gjorde jag först övningen och träningsuppgifterna och pig-spelet. Det gav mig en bra grund för att förstå hur objektorienterade konstruktioner fungerar i Symfony. 
    Jag återanvände mycket av strukturen från övningen, men anpassade logiken för att hantera kort istället för tärningar. Kodstrukturen är exakt samma, vilket gjorde det lättare att komma igång. 
    I src skapade jag en Card-mapp och inuti finns alla klasser som har med kort att göra. I controller-mappen finns både CardGameController och CardApiController, vilket gör att jag kan hantera både HTML-sidor och API-endpoints separat.</p>

    <p>I templates skapade jag en separat card-mapp med alla templates-filer som behövdes. Alla templates utgår från base.html.twig, så jag kunde återanvända layouten enkelt. 
    Det blev tydligt hur Symfony använder Twig och routes för att koppla samman logik och presentation. Jag använde också session för att spara kortleken, vilket påminde om hur man jobbade med flask.session i Python.
    Jag tycker det var smidigt att följa strukturen som Symfony ger, eftersom det blir lätt att hitta och förstå var varje del hör hemma. Det gör också felsökning och vidareutveckling enklare.</p>

    <p>Så här långt har det gått bra att jobba i Symfony. Det påminner lite om Flask från oopython-kursen, vilket gör att koncepten känns bekanta.
    Koden är uppdelad i filer som alla är länkade till varandra och följer ett tydligt flöde. När man vänjer sig vid strukturen känns det ganska naturligt att arbeta med controllers, templates och klasser separat.
    Jag gillar att man får en bra separation av logik och presentation. Det hjälper till att hålla koden ren och organiserad, och gör att jag känner att jag har bra kontroll på helheten.</p>

    <p>Min TIL för detta kmom är att jag förstod vad ett API egentligen är. Jag visste inte riktigt vad man skulle ha det till i början, men nu har jag lärt mig att det är som ett sätt för ett program att ge ut data utan att man behöver bygga en hel hemsida. 
    Det är bra om man till exempel ska bygga en app eller om något annat program ska hämta information från min kod. Jag lärde mig också skillnaden mellan vanliga routes och POST-routes i ett API, att vissa bara fungerar om man skickar ett formulär eller en POST-förfrågan.
    Jag tycker det var lite klurigt först men efter att ha testat med formulär och fått det att fungera så känns det mycket tydligare. Det känns som något jag kommer använda mer framöver.</p>
</section>

<section id="kmom03">
    <h2>kmom03</h2>
    <p>Jag tyckte det var väldigt nyttigt att planera min kod i förväg med både flödesschema och pseudokod.
    Det gjorde att jag visste exakt vad jag skulle göra innan jag började skriva själva koden, vilket sparade mycket tid och gjorde arbetet mer fokuserat.
    Flödesschemat hjälpte mig att förstå hur spelets logik skulle flöda från början till slut, och pseudokoden gjorde det enkelt att översätta tankarna till faktisk kod.
    Jag kommer definitivt att fortsätta använda pseudokod framöver – det är ett kraftfullt verktyg i min problemlösning.</p>

    <p>Jag började uppgiften med att planera hur jag ville strukturera allt. Jag valde spelet 21 och gjorde en tydlig plan för hur arbetet skulle delas upp över två dagar.
    Först skrev jag pseudokod, beskrev alla klasser och ritade ett flödesschema.
    Därefter skapade jag en dokumentationssida under routen /game/doc och valde att jobba i en ny controller för att hålla spelet tydligt avgränsat från övriga delar.
    All dokumentation samlades där, inklusive klassbeskrivningar, flödesschema och pseudokod.
    Sen gick jag vidare med landningssidan för spelet, där jag la till spelregler, en knapp för att starta, och en länk till dokumentationen – samt länkade den från navbaren. Efter det tog jag tag i själva kortspelklasserna.
    Jag återanvände så mycket som möjligt från tidigare kod, men byggde också ut det som behövdes, som Game21, Bank, och en uppdaterad Player.
    Spelmekaniken kom därefter: jag skapade routes och funktioner för att dra kort, stanna och börja om, samt för att visa vinnaren.
    Slutligen implementerade jag sessionhantering så att spelet kan pågå över flera requests.
    Jag känner mig nöjd med helheten och tycker att applikationen är strukturerad och tydlig. Det finns alltid detaljer att putsa på, men som helhet tycker jag att jag lyckades bra.</p>

    <p>Jag tycker att Symfony ger en tydlig struktur, vilket har hjälpt mig att förstå var alla delar av koden ska ligga.
    Det gör det enklare att organisera både logik, vyer och routes. Samtidigt har jag märkt att det kan bli lite tungt när man bygger flera olika deluppgifter i samma projekt.
    Jag har till exempel kvar gammal kod i min nya controller, mest för att jag är rädd att något ska sluta fungera om jag tar bort den.
    Eftersom varje uppgift ofta kräver egna controllers, templates, klasser och routes blir det snabbt många mappar och filer.
    Därför märker jag hur viktigt det är att vara noggrann redan från början med hur man döper saker och hur man delar upp projektet. Det har blivit en viktig lärdom för mig.</p>

    <p>Min största TIL (Today I Learned) från det här kursmomentet är hur användbart det är att arbeta med flödesscheman och pseudokod.
    Flödesschemat var helt nytt för mig, men visade sig vara en väldigt bra strategi för att förstå och planera hela spelprocessen visuellt.
    Pseudokod var också ett otroligt effektivt verktyg som jag verkligen kommer att fortsätta använda.
    Det hjälpte mig att strukturera mina tankar innan jag skrev riktig kod och gjorde hela utvecklingsprocessen mycket tydligare.</p>
</section>

<section id="kmom04">
    <h2>kmom04</h2>
    <p>Jag upplevde det som en bra övning i att tänka igenom min kod noggrant.Att skriva tester tvingade mig att förstå min egen logik bättre och fundera på vad som kan gå fel. 
    Det blev tydligt att testkoden ofta blir längre än själva produktionskoden – men det är rimligt eftersom man behöver täcka många möjliga scenarier.
    Jag gillade att PHPUnit var lätt att använda och att jag snabbt fick feedback på vad som fungerade och inte.
    Det blev ett bra sätt att validera att spelets regler fungerade som de skulle.</p>

    <p>Jag lyckades komma upp i 83 % kodtäckning totalt, vilket känns bra eftersom kravet låg på 70 %. 
    Jag testade alla modellklasser och såg till att varje metod hade minst ett test. Det var lite klurigt att komma åt exakt allt, men jag kände att jag ville börja lugnt för att bli bekväm med tester först.
    </p>

    <p>Jag tycker att min kod var ganska enkel att testa eftersom jag har hållit den uppdelad och tunn.
    Klasserna gör en sak var, och metoderna är små och tydliga. Det fanns egentligen inga större hinder för att skriva tester, så jag skulle säga att den är testbar från början.
    Jag behövde inte skriva om något för att kunna testa koden den här gången.</p>

    <p>Jag valde att inte skriva om delar av koden eller göra den mer testbar. Jag kände inte att det behövdes eftersom det var ganska lite kod och den var redan rätt tydlig och uppdelad.
    Om det hade varit mer komplex logik hade jag kanske behövt skriva om vissa delar för att kunna testa bättre, men nu gick det bra att skriva tester direkt.
    </p>

    <p>Jag tycker att testbar kod ofta hänger ihop med snygg och ren kod.
    Om koden är uppdelad i flera filer, metoderna är små och gör en sak var, och det inte finns en massa komplicerade if-satser överallt – då blir det automatiskt lättare att testa också.
    Så testbarhet kan absolut vara ett tecken på att koden är välskriven.
    </p>

    <p>Den här veckan lärde jag mig att använda PHPUnit och PHPDoc, och jag blev positivt överraskad över hur smidiga och användbara de är.
    Jag fick bättre koll på hur man tänker när man skriver tester och vad man behöver testa för att vara säker på att koden fungerar.
    Det gav också en bra känsla av kontroll och kvalitet på projektet.
    </p>

</section>

<section id="kmom05">
    <h2>kmom05</h2>
    <p>Det gick bra att jobba igenom övningen med Symfony och Doctrine.
    Eftersom jag nyligen läst databaskursen och tränat mycket på att skriva manuell SQL och göra CRUD-operationer "för hand", så var det spännande att nu få uppleva hur ett ORM-verktyg som Doctrine kan förenkla samma process.
    Det var tydligt hur mycket smidigare det blir att jobba med databasen direkt via PHP-objekt utan att behöva tänka på SQL-frågor hela tiden.
    Det gör det mer tillgängligt för utvecklare som inte är vana vid SQL, och snabbar upp arbetet mycket.</p>

    <p>Jag utgick helt från övningskoden där produkthantering implementerats, men valde att byta ut produkterna mot böcker i ett bibliotek, vilket passade uppgiftens krav bättre.
    När jag tänkte på användaren fokuserade jag på att göra applikationen enkel att navigera i.
    Jag lade till en tydlig länk till biblioteket i navbaren samt interna länkar i vyn för att snabbt kunna skapa, visa, uppdatera eller ta bort böcker.
    Gränssnittet är enkelt men funktionellt, med tydliga rubriker och tabeller för att lista böckerna, samt länkar till detaljerade sidor.</p>

    <p>Det gick jättebra att jobba med ORM i CRUD. Som jag nämnde tidigare var det väldigt smidigt att använda Doctrine – ett riktigt trevligt verktyg jämfört med att skriva all SQL manuellt.</p>

    <p>ORM känns som ett väldigt trevligt sätt att arbeta med databaser.
    Det underlättar jobbet mycket och gör det enklare att fokusera på applikationslogik istället för att fastna i detaljerad SQL.
    Det gör det också lättare att dela upp arbetet i ett team där inte alla kanske har full koll på databaser – en programmerare kan arbeta mot entiteter och objekt utan att behöva tänka på frågespråk och relationsmodeller.</p>

    <p>Min TIL för detta kmom är vad ORM faktiskt är, hur det fungerar, och vilka för- och nackdelar det innebär.
    Jag har också fått en ökad förståelse för olika sätt att arbeta mot databaser, som Query Builder, Active Record och andra data access patterns. 
    Det har varit särskilt lärorikt att arbeta praktiskt med Doctrine i Symfony och se hur ORM kopplas till verkliga entiteter och applikationslogik.</p>
    
</section>

<section id="kmom06">
    <h2>kmom06</h2>
    <p>Jag tyckte PhpMetrics var ett bra och enkelt verktyg. Det var lätt att hitta i rapporten och jag gillade att man snabbt kunde se vilka klasser som var för komplexa eller hade för många ansvar.
    Jag tyckte speciellt om betygen på klasserna (A till E) och måtten på komplexitet – det hjälpte mig att förstå vad som behövde förbättras.</p>

    <p>Jag hade en hel del strul med att få Scrutinizer att fungera. Det tog lång tid att få till rätt konfiguration i .scrutinizer.yml, och det var svårt att förstå vad som var fel ibland.
    Men när det väl fungerade så tyckte jag att det var ett riktigt bra verktyg – kanske till och med bättre än PhpMetrics. Det gav mycket detaljerad information, och det var tydligt vad som förbättrats från en körning till nästa.
    Efter första körningen fick jag 16,3 % kodtäckning och ett kvalitetsscore på 7.28. Efter förbättringarna ökade det till 20 % täckning och 7.29 i kvalitet, vilket var roligt att se.</p>

    <p>Jag tycker att kodkvalitet handlar mycket om det jag skrev tidigare med de sex C:na – alltså saker som läsbarhet, struktur, testbarhet och hur beroende koden är av andra delar.
    Jag håller med om att det går att påvisa kodkvalitet, åtminstone till viss del, med hjälp av verktyg och badges. Till exempel visar Scrutinizer både testtäckning och ett kvalitetspoäng, och även om det inte säger allt så ger det en bra bild av hur välstrukturerad och testad koden är.</p>

    <p>Min TIL för detta kmom är att jag verkligen har lärt mig hur man använder verktyg som PhpMetrics och Scrutinizer för att analysera kodkvalitet.
    ag fick också en djupare förståelse för hur konfigurationsfiler fungerar, speciellt .scrutinizer.yml, eftersom jag hade mycket problem med den i början och tvingades felsöka noggrant.
    Det gjorde att jag nu känner mig mycket säkrare på hur sådana verktyg kopplas ihop med GitHub och hur de tolkar min kod.</p>

</section>

{% endblock %}