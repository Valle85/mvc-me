{% extends "base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block main %}
    <h1>Redovisning</h1>

<section id="kmom01">
    <h2>kmom01</h2>
    <p>Jag har tidigare testat objektorienerad programmering främst i JavaScript och Python, men inte i PHP. 
    Jag har känner igen vissa strutkurer som klasser, objekt, arv, konstruktorn  men det är lite annorlunda än vad jag är van med. 
    Jag har fått en tydligare inblick i hur dessa används i PHP. 
    I tidigare kurser har jag testat en del PHP, så det är roligt att nu få bygga mer strukturerat med klasser och ramverk. 
    Det känns som att denna kurs är mera omfattande.</p>

    <p>PHPs modell för klasser och objekt fungerar på ett liknande sätt som i andra språk. 
    För att komma igång behöver man veta hur man skapar en klass med class, hur man gör ett objekt med new, och hur man skapar egenskaper och metoder i klassen. 
    Det är också bra att förstå vad public, private och protected betyder. 
    Man använder ofta en metod som heter __construct() för att köra kod direkt när objektet skapas. 
    Det är också viktigt att veta hur man organiserar sin kod i olika filer och mappar med hjälp av namespaces.</p>

    <p>När det gäller strukturen i me-sidan tycker jag att den var väl genomtänkt. 
    Symfony är ett stort ramverk, men det ger tydliga riktlinjer för hur man bör organisera controllers, templates och routes. 
    Att arbeta med Twig var smidigt, och det gjorde det lätt att separera logik och presentation. 
    Jag gillar att varje route har en egen metod i controllern och att man enkelt kan återanvända layout.
    Jag upplevde dock att det ibland var lite mycket att hålla reda på i början, men med lite övning blir det lättare snart.</p>

    <p>Artikeln PHP The Right Way var väldigt användbar och lättläst. 
    Jag tycker Composer är extra intressant eftersom det gör det enkelt att lägga till färdiga paket.
    Även avsnitten om kodstil, säkerhet och testning var intressanta.
    Jag vill gärna lära mig mer om testning, det verkar användbart för att hitta fel tidigt. 
    Kodstilen som föreslås gör koden tydligare och lättare att förstå.</p>

    <p>Min TIL för detta kmom är vad Symfony och hur det används.
    Jag hade förväntat mig att det skulle vara betydligt mer komplicerat att komma igång, men tack vare strukturen från övningen har det gått ganska smidigt. 
    Jag lärde mig också hur routing fungerar i Symfony och hur man bygger upp JSON API:er. 
    Jag tycker det bra att följa ramverkets struktur för att det ska gå snabbt och smidigt att skriva kod.</p>
</section>

<section id="kmom02">
    <h2>kmom02</h2>
    <p>Arv utökar basklassens beteende. Exempelvis ärver hund från djur. Subklassen ärver från basklassen och ska kunna ersätta basklassen.
    Komposition kan man säga att när en klass innehåller en annan klass, exempelvis har ett hus rum och rum kan inte finnas om huset brinner ned.
    Interface är kontrakt av klassstrukturen, som avtal som gäller metoder. Det används ofta när man vill säkerställa att vissa metoder finns men inte hur de är implementerade.
    Slutligen Trait är återanvändbar fristående koddel. Den används istället för multipelt arv eftersom PHP inte stödjer det direkt, och det är ett sätt att återanvända kod i olika klasser utan arv.</p>

    <p>För att lösa uppgiften gjorde jag först övningen och träningsuppgifterna och pig-spelet. Det gav mig en bra grund för att förstå hur objektorienterade konstruktioner fungerar i Symfony. 
    Jag återanvände mycket av strukturen från övningen, men anpassade logiken för att hantera kort istället för tärningar. Kodstrukturen är exakt samma, vilket gjorde det lättare att komma igång. 
    I src skapade jag en Card-mapp och inuti finns alla klasser som har med kort att göra. I controller-mappen finns både CardGameController och CardApiController, vilket gör att jag kan hantera både HTML-sidor och API-endpoints separat.</p>

    <p>I templates skapade jag en separat card-mapp med alla templates-filer som behövdes. Alla templates utgår från base.html.twig, så jag kunde återanvända layouten enkelt. 
    Det blev tydligt hur Symfony använder Twig och routes för att koppla samman logik och presentation. Jag använde också session för att spara kortleken, vilket påminde om hur man jobbade med flask.session i Python.
    Jag tycker det var smidigt att följa strukturen som Symfony ger, eftersom det blir lätt att hitta och förstå var varje del hör hemma. Det gör också felsökning och vidareutveckling enklare.</p>

    <p>Så här långt har det gått bra att jobba i Symfony. Det påminner lite om Flask från oopython-kursen, vilket gör att koncepten känns bekanta.
    Koden är uppdelad i filer som alla är länkade till varandra och följer ett tydligt flöde. När man vänjer sig vid strukturen känns det ganska naturligt att arbeta med controllers, templates och klasser separat.
    Jag gillar att man får en bra separation av logik och presentation. Det hjälper till att hålla koden ren och organiserad, och gör att jag känner att jag har bra kontroll på helheten.</p>

    <p>Min TIL för detta kmom är att jag förstod vad ett API egentligen är. Jag visste inte riktigt vad man skulle ha det till i början, men nu har jag lärt mig att det är som ett sätt för ett program att ge ut data utan att man behöver bygga en hel hemsida. 
    Det är bra om man till exempel ska bygga en app eller om något annat program ska hämta information från min kod. Jag lärde mig också skillnaden mellan vanliga routes och POST-routes i ett API, att vissa bara fungerar om man skickar ett formulär eller en POST-förfrågan.
    Jag tycker det var lite klurigt först men efter att ha testat med formulär och fått det att fungera så känns det mycket tydligare. Det känns som något jag kommer använda mer framöver.</p>
</section>

{% endblock %}